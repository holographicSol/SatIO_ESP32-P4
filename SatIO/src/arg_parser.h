/*
    This file was generated by AI and is therefore experimental.
    Arg Parser - Writtin By Benjamin Jack Cullen.

    (1) Initialize variable of type ArgParser:
    ArgParser parser;

    (2) Init:
    argparser_init_from_buffer(&parser, SOME_BUFFER);

    (3) Get Positionals:
    size_t pos_count;
    const char** pos = argparser_get_positionals(&parser, &pos_count);

    (4) Check command:
    strcmp(pos[0], "foobar")==0

    (5) Check flag/bool etc:
    argparser_get_bool(&parser, "flagname")
    argparser_has_flag(&parser, "flagname")
    etc.
*/

#ifndef ARG_PARSER_H
#define ARG_PARSER_H

#include <stdint.h>
#include <stddef.h> // for size_t
#include <stdbool.h>
#include <config.h>

#ifdef __cplusplus
extern "C" {
#endif

#define MAX_INPUT_LEN 512
#define MAX_FLAG_LEN 256
#define MAX_POS_LEN 256
#define MAX_VALUE_LEN 56
#define MAX_POSITIONALS 32
#define MAX_TOKENS 32
#define MAX_PLAIN_TOKENS 32
#define MAX_FLAGS 32

typedef struct ArgParser {
    char input_buffer[MAX_GLOBAL_SERIAL_BUFFER_SIZE];
    char* tokens[MAX_TOKENS];
    char flags[MAX_FLAGS][MAX_FLAG_LEN];
    char values[MAX_FLAGS][MAX_VALUE_LEN];
    size_t flag_count;
    char positionals[MAX_POSITIONALS][MAX_POS_LEN];
    char* pos_ptrs[MAX_POSITIONALS];
    size_t pos_count;
} ArgParser;

typedef struct PlainArgParser {
    char input_buffer[MAX_GLOBAL_SERIAL_BUFFER_SIZE];
    char tokens[MAX_PLAIN_TOKENS][MAX_GLOBAL_ELEMENT_SIZE];
    size_t total_tokens;
    int i_iter_token;
} PlainArgParser;

/**
 * Simple arg parser for flagless parsing.
 * @param p Pointer to user-allocated PlainArgParser struct
 * @param buffer Input buffer
 * @param index Index start append to tokens.
 * @return true on success, false on error (e.g., invalid args)
 */
bool simple_argparser_init_from_buffer(PlainArgParser* p, char* buffer, int index);

/**
 * Initializes the user-provided ArgParser with command-line arguments (from argv).
 * @param p Pointer to user-allocated ArgParser struct
 * @param argc Number of arguments
 * @param argv Argument vector
 * @return true on success, false on error (e.g., invalid args)
 */
bool argparser_init(ArgParser* p, int argc, char** argv);

/**
 * Initializes the user-provided ArgParser from a buffer (space-separated tokens).
 * Parses the buffer as arguments, similar to argv[1..].
 * @param p Pointer to user-allocated ArgParser struct
 * @param buffer The input buffer to parse (copied and modified internally)
 * @return true on success, false on error (e.g., buffer too long)
 */
bool argparser_init_from_buffer(ArgParser* p, const char* buffer);

/**
 * Resets the ArgParser to initial state (clears all data).
 * @param p The ArgParser to reset
 */
void argparser_reset(ArgParser* p);

/**
 * Checks if a flag is present.
 * Supports both long (--flag) and short (-f) formats.
 * @param p The ArgParser
 * @param flag The flag name (without -- or -)
 * @return true if the flag is present
 */
bool argparser_has_flag(const ArgParser* p, const char* flag);

/**
 * Gets the string value for a flag. If no value, returns default.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return Pointer to the value (valid until next init/reset)
 */
const char* argparser_get_string(const ArgParser* p, const char* flag, const char* default_val);

/**
 * Gets the int8 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
int argparser_get_int(const ArgParser* p, const char* flag, int default_val);

/**
 * Gets the int8 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
int8_t argparser_get_int8(const ArgParser* p, const char* flag, int8_t default_val);

/**
 * Gets the int16 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
int16_t argparser_get_int16(const ArgParser* p, const char* flag, int16_t default_val);

/**
 * Gets the int32 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
int32_t argparser_get_int32(const ArgParser* p, const char* flag, int32_t default_val);

/**
 * Gets the int64 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
int64_t argparser_get_int64(const ArgParser* p, const char* flag, int64_t default_val);

/**
 * Gets the uint8 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
uint8_t argparser_get_uint8(const ArgParser* p, const char* flag, uint8_t default_val);

/**
 * Gets the uint16 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
uint16_t argparser_get_uint16(const ArgParser* p, const char* flag, uint16_t default_val);

/**
 * Gets the uint32 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
uint32_t argparser_get_uint32(const ArgParser* p, const char* flag, uint32_t default_val);

/**
 * Gets the uint64 value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
uint64_t argparser_get_uint64(const ArgParser* p, const char* flag, uint64_t default_val);

/**
 * Gets the float value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
float argparser_get_float(const ArgParser* p, const char* flag, float default_val);

/**
 * Gets the double value for a flag. Returns default if not set or invalid.
 * @param p The ArgParser
 * @param flag The flag name
 * @param default_val Default value if not set
 * @return The value or default
 */
double argparser_get_double(const ArgParser* p, const char* flag, double default_val);

/**
 * Gets the bool value for a flag (presence implies true).
 * @param p The ArgParser
 * @param flag The flag name
 * @return true if present
 */
bool argparser_get_bool(const ArgParser* p, const char* flag);

/**
 * Gets the positional arguments.
 * @param p The ArgParser
 * @param count Output: number of positional args
 * @return Array of positional args (valid until next init/reset)
 */
const char** argparser_get_positionals(const ArgParser* p, size_t* count);

/**
 * Gets the number of positional arguments.
 * @param p The ArgParser
 * @return Size of positionals
 */
size_t argparser_positional_count(const ArgParser* p);

/**
 * Gets the number of positional arguments.
 * @param p The ArgParser
 * @param default_val Default value if not set
 * @return Path chars
 */
const char* argparser_get_path(const ArgParser* p, const char* default_val);

#ifdef __cplusplus
}
#endif

#endif // ARG_PARSER_H